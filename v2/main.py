# medvape bot - bot for vapeshop #
from aiogram.utils import executor
from aiogram import Dispatcher, Bot, types
from aiogram.dispatcher.filters import Text

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from aiogram.types import ReplyKeyboardRemove

from config import TOKEN, MAIN_MENU, METRO_STATIONS, MANAGER_ID, chek_time, ACCEPT_MENU, catalog, ADMIN_PANEL
from db import update_database, check_product, get_products
from commands import set_bot_commands

user_data = {}
dt = {}
storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage = storage)

#TODO: —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞

class LOrder(StatesGroup):
    orderplace = State()
    ordertime = State()
    product = State()
    moderation = State()

@dp.message_handler(commands = ['start', 'order'])
async def welcome(message: types.Message):
    global user_data

    await set_bot_commands(bot = bot)

    if user_data.get(message.from_user.username) == None:

        user_data[message.from_user.username] = message.from_user.username 
        user_data[message.from_user.username] = {
            'id'        : message.from_id,
            'orderplace': None,   #* place where customer is gonna buy product
            'ordertime' : None,   #* time when customer is gonna buy product
            'product'   : None    #* product that user ordered

        }
    else:
        user_data[message.from_user.username]['orderplace'] = None
        user_data[message.from_user.username]['ordertime']  = None
        user_data[message.from_user.username]['product'] = None


    print('[log]: user ->', user_data)

    if message.text == '/start' and message.from_user.id == MANAGER_ID:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º')
    elif message.text == '/start':
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º', reply_markup = MAIN_MENU)

    if message.text == '/order' and message.from_id == MANAGER_ID:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = ADMIN_PANEL)    
    else:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = MAIN_MENU)    


@dp.message_handler(content_types = 'text')
async def msg_handler_func(message: types.Message):
    #* starts an ordering process
    if message.text.lower() == '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üí®':
        print('order started')
        await bot.send_message(message.from_id, '–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å\n1Ô∏è‚É£ –º–µ—Å—Ç–æ\n2Ô∏è‚É£ –≤—Ä–µ–º—è\n3Ô∏è‚É£ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å')
        await bot.send_message(message.from_id, '–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –∏–ª–∏ –∞–¥—Ä–µ—Å\nüî¥–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –¥–æ–º–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–ø–ª–∞—Ç–∏—Ç—å 5bynüî¥')
        await LOrder.orderplace.set()


    #* sends a list of avilable products
    elif message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥üìã':
        print('btn1')
        await bot.send_message(message.from_id, '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üìã', reply_markup = catalog)
        await bot.send_message(message.from_id, '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º <a href="https://t.me/medyvape">–∫–∞–Ω–∞–ª</a>', parse_mode = 'HTML')

    #* sends managers username  
    elif message.text.lower() == '–º–µ–Ω–µ–¥–∂–µ—Äüë∑‚Äç‚ôÇÔ∏è':
        print('btn2')
        await bot.send_message(message.from_id, f'–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞—à–µ–≥–æ <a href = "https://t.me/MinskoeOpg1">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä–∞üë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')


    elif message.text.lower() == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥üîÑ' and message.from_id == MANAGER_ID:
        print('btn3')
        try:
            update_database()
            await bot.send_message(message.from_id, '–≥–æ—Ç–æ–≤–æ')
        except Exception as e:
            print('–æ—à–∏–±–∫–∞: ', e)

    else:
        await bot.send_message(message.from_id, '‚ÄºÔ∏è–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é‚ÄºÔ∏è')

#! ----- FSM MACHINE ----- !# 

@dp.message_handler(state = LOrder.orderplace)
async def setting_order_place(message: types.Message, state: FSMContext):
    global user_data
    
    await state.update_data(orderplace = message.text)
    data = await state.get_data()

    print('[log - orderplace]:', user_data)

    if data['orderplace'].lower() in METRO_STATIONS:
        user_data[message.from_user.username]['orderplace'] = data['orderplace']

        await bot.send_message(message.from_id, '–æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –ø—Ä–∏–º–µ—Ä 14:00', reply_markup = ReplyKeyboardRemove())
        await LOrder.next()

    else:
        await bot.send_message(message.from_id, '–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–º—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ø–æ –ø—Ä–∏–º–µ—Ä—É.\n–ü—Ä–∏–º–µ—Ä: –ö—É–ø–∞–ª–æ–≤—Å–∫–∞—è')
        await LOrder.orderplace.set()

@dp.message_handler(state = LOrder.ordertime)
async def setting_order_time(message: types.Message, state: FSMContext):
    await state.update_data(ordertime = message.text)
    data = await state.get_data()

    user_data[message.from_user.username]['ordertime'] = data['ordertime']

    print('[log - ordertime]:', user_data)

    if chek_time(data) == True:
        await bot.send_message(message.from_id, '–æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä')
        await bot.send_message(message.from_id, '–∫–∞—Ç–∞–ª–æ–≥ –Ω–∏–∂–µ', reply_markup = catalog)
        
        await LOrder.next()
    else:
        await bot.send_message(message.from_id, '–≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ –ø—Ä–∏–º–µ—Ä—É.\n–ü—Ä–∏–º–µ—Ä: 14:00')

    print(chek_time(data))

@dp.message_handler(state = LOrder.product)
async def setting_taste_func(message: types.Message, state: FSMContext):
    global data, dt

    await state.update_data(product = message.text)
    await state.update_data(username = message.from_user.username)
    data = await state.get_data()

    print('check_product', check_product(data['product'].lower()) == True)

    if check_product(data['product'].lower()) == True:
        dt = data
        user_data[message.from_user.username]['product'] = data['product']

        print('[log - orderproduct]:', user_data)

        await bot.send_message(message.from_id, '–æ—Ç–ª–∏—á–Ω–æ, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
        await bot.send_message(MANAGER_ID, f'username: @{message.from_user.username}\n\
        product: {user_data[message.from_user.username]["product"]}\n\
        time: {user_data[message.from_user.username]["ordertime"]}\n\
        place: {user_data[message.from_user.username]["orderplace"]}', reply_markup = ACCEPT_MENU)
        
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞')

@dp.callback_query_handler(Text(['reject', 'accept']))
async def moderation_func(call: types.CallbackQuery):
        print(user_data)

        if call.data == 'reject':
            await bot.send_message(user_data[dt['username']]['id'], '–≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–æ–∫–ª–æ–Ω—ë–Ω')

        elif call.data == 'accept':
            await bot.send_message(user_data[dt['username']]['id'], '–≤–∞—à –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω –∏ —É–∂–µ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ')
            await bot.send_message(user_data[dt['username']]['id'], f'–≤ {user_data[dt["username"]]["ordertime"]} –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –±—ã—Ç—å –Ω–∞ {METRO_STATIONS[user_data[dt["username"]]["orderplace"].lower()]}\n—Ç–∞–º –≤–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä —Å {user_data[data["username"]]["product"]}')
            await bot.send_message(user_data[dt['username']]['id'], '–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑, —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É -> /order')                                                                                                                                                                

executor.start_polling(dp)