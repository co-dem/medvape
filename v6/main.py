# medvape bot - bot for vapeshop #
import schedule
import datetime

from aiogram.utils import executor
from aiogram import Dispatcher, Bot, types
from aiogram.dispatcher.filters import Text

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

from commands import set_bot_commands
from config import TOKEN, MAIN_MENU, METRO_STATIONS, MANAGER_ID, catalog,\
                   ADMIN_PANEL, check_time, DEVELOPERID, DEVELOPER_PANEL, clear_stats_mrk
from db import update_database, check_product, changestats, upload_products, showstats, clear_stats

from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup

#$ new feature: bot can show selling stats
#TODO: make bot to write all stat info to the svg/excel file and clear it at the end of the month

now = datetime.datetime.now()           #* datetime object
orders = []                             #* variable to store orders (for developer only)
dt = {}                                 #* dt and           are created to make oder process exactlyer
user_data = {}                          #*        user_data
storage = MemoryStorage()               #* memory object
bot = Bot(TOKEN)                        #* bot object
dp = Dispatcher(bot, storage = storage) #* Dispatcher object

class LOrder(StatesGroup):   
    orderplace = State()
    ordertime = State()
    product = State()
    moderation = State()


#* function to create an account for user
# userid | username | orderplace | ordertime | product
def login_func(user) -> None:
    global user_data

    # if user doesn't exist, add him 
    if user_data.get(user.from_user.username) == None:

        user_data[user.from_user.username] = user.from_user.username 
        user_data[user.from_user.username] = {
            'id'        : user.from_id,
            'username'  : user.from_user.username,
            'orderplace': None,   #* place where customer is gonna buy product
            'ordertime' : None,   #* time when customer is gonna buy product
            'product'   : None    #* product that user ordered
        }
        #* if user already exists, setall data to none
    else:
        user_data[user.from_user.username]['orderplace'] = None
        user_data[user.from_user.username]['ordertime']  = None
        user_data[user.from_user.username]['product'] = None

#* starting function
'''
here we set the access level for user:
basic user | manager | developer

and creating an account for user
'''
@dp.message_handler(commands = ['start', 'order'])
async def welcome(message: types.Message):
    
    await set_bot_commands(bot = bot)   # setting hot commands
    login_func(user = message)          # creating an account
    upload_products()                   # uploading products for stats

    print('[log]: new user ->', user_data)

    #* developer access level
    if message.text == '/start' and message.from_id == 798330024:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º\n—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: developer', reply_markup = DEVELOPER_PANEL)
    #* manager access level
    elif message.text == '/start' and message.from_user.id == MANAGER_ID:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º\n—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: manager', reply_markup = ADMIN_PANEL)
    #* basic user access level
    elif message.text == '/start' and message.from_user.id != MANAGER_ID:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º', reply_markup = MAIN_MENU)

    # same
    elif message.text == '/order' and message.from_id == 798330024:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = DEVELOPER_PANEL)    
    
    elif message.text == '/order' and message.from_id == MANAGER_ID:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = ADMIN_PANEL)    
    elif message.text == '/order' and message.from_id != MANAGER_ID:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = MAIN_MENU)    
    login_func(user = message)


@dp.message_handler(content_types = 'text')
async def msg_handler_func(message: types.Message):
    global orders
    
    #* ----- commands for all users
    #* starts an ordering process
    if message.text.lower() == '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üí®':
        print('order started')
        await bot.send_message(message.from_id, '–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å\n1Ô∏è‚É£ –º–µ—Å—Ç–æ\n2Ô∏è‚É£ –≤—Ä–µ–º—è\n3Ô∏è‚É£ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å', reply_markup = ReplyKeyboardRemove())
        await bot.send_message(message.from_id, '–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –∏–ª–∏ –∞–¥—Ä–µ—Å\nüî¥–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –¥–æ–º–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–ø–ª–∞—Ç–∏—Ç—å 5bynüî¥')
        # last check for having an account
        login_func(user = message)
        await LOrder.orderplace.set()


    #* sends a list of avilable products
    elif message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥üìã':
        print('btn1')
        await bot.send_message(message.from_id, '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üìã', reply_markup = catalog)
        await bot.send_message(message.from_id, '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º <a href="https://t.me/medyvape">–∫–∞–Ω–∞–ª</a>', parse_mode = 'HTML')

    #* sends managers username  
    elif message.text.lower() == '–º–µ–Ω–µ–¥–∂–µ—Äüë∑‚Äç‚ôÇÔ∏è':
        print('btn2')
        await bot.send_message(message.from_id, f'–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞—à–µ–≥–æ <a href = "https://t.me/MinskoeOpg1">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä–∞üë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')

    elif message.text.lower() == '‚≠êÔ∏è–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚≠êÔ∏è':
        await bot.send_message(message.from_id, '–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ üßë‚Äçüíª<a href="https://t.me/c0dem">—Å–æ–∑–¥–∞—Ç–µ–ª—é</a>üßë‚Äçüíª\n', parse_mode = 'HTML')


    #* ----- manager commands 
    elif message.text.lower() == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥üîÑ' and message.from_id == (MANAGER_ID or DEVELOPERID):
        print('[log]: updating catalog')
        try:
            update_database()
            await bot.send_message(message.from_user.id, '–≥–æ—Ç–æ–≤–æ')
            print('success')
        except Exception as e:
            await bot.send_message(message.from_user.id, '–æ—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n–ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–∞–º–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å <a href = "https://t.me/c0dem">—Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞</a>', parse_mode = 'HTML')
            print('–æ—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ', e)

    elif message.text.lower() == 'üìä–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìä' and message.from_id == (MANAGER_ID or DEVELOPERID):
        stat_string = ''
        for i in showstats().items():
            stat_string += f'{i[0]}: {i[1]}\n'
        await bot.send_message(message.from_id, stat_string, reply_markup = clear_stats_mrk)

    #* ----- developer commands
    elif message.from_id == 798330024 and message.text == 'üö´–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞üö´':
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id)
        quit()

    
    elif message.from_id == 798330024 and message.text == '–æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã':
        await bot.send_message(DEVELOPERID, orders)
        orders = []
        print(f'[log]: orders cleared successfully | orders list --> {orders}')

    elif message.text.lower() == 'üßπ–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüßπ' and message.from_user.id == (DEVELOPERID or MANAGER_ID):
        print(clear_stats())
        await bot.send_message(message.from_id, "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")

    elif message.from_id == DEVELOPERID or MANAGER_ID and message.text.lower() == '‚óÄÔ∏è–Ω–∞–∑–∞–¥':
        if message.from_id == DEVELOPERID:
            await bot.send_message(message.from_id, '–ø–µ—Ä–µ–≤–æ–∂—É –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = DEVELOPER_PANEL)
        elif message.from_id == MANAGER_ID:
            await bot.send_message(message.from_id, '–ø–µ—Ä–µ–≤–æ–∂—É –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = ADMIN_PANEL)

    else:
        await bot.send_message(message.from_id, '‚ÄºÔ∏è–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é‚ÄºÔ∏è')


#! -------- FSM -------- !#  
@dp.message_handler(state = LOrder.orderplace)
async def setting_order_place(message: types.Message, state: FSMContext):
    global user_data
    
    await state.update_data(orderplace = message.text)
    data = await state.get_data()

    print('[log - orderplace]:', user_data)

    user_data[message.from_user.username]['orderplace'] = data['orderplace']

    await bot.send_message(message.from_id, '‚úÖ–æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –ø—Ä–∏–º–µ—Ä 14:00', reply_markup = ReplyKeyboardRemove())
    await LOrder.next()

@dp.message_handler(state = LOrder.ordertime)
async def setting_order_time(message: types.Message, state: FSMContext):
    await state.update_data(ordertime = message.text)
    data = await state.get_data()

    user_data[message.from_user.username]['ordertime'] = data['ordertime']

    print('[log - ordertime]:', user_data)

    #* cheking for entering the time correctly
    if check_time(data) == True:
        print('passing the time check: ', check_time(data))
        await bot.send_message(message.from_id, '‚úÖ–æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.\n–ø—Ä–∏–º–µ—Ä: –±–∞–Ω–∞–Ω, –∫–ª—É–±–Ω–∏–∫–∞, –ª—ë–¥')
        await bot.send_message(message.from_id, '–∫–∞—Ç–∞–ª–æ–≥ –Ω–∏–∂–µ', reply_markup = catalog)
        
        await LOrder.next()
    else:
        await bot.send_message(message.from_id, '‚ÄºÔ∏è–≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ –ø—Ä–∏–º–µ—Ä—É‚ÄºÔ∏è\n–ü—Ä–∏–º–µ—Ä: 14:00')
        await LOrder.ordertime.set()

@dp.message_handler(state = LOrder.product)
async def setting_taste_func(message: types.Message, state: FSMContext):
    global data, dt, orders

    await state.update_data(product = message.text.strip())
    await state.update_data(username = message.from_user.username)
    data = await state.get_data()

    #* cheking if product that user choosed is available
    available_product = check_product(data['product'].lower()) == True

    print('passing product check: ', available_product)

    if available_product == True:
        dt = data
        user_data[message.from_user.username]['product'] = data['product']

        changestats(data['product'])

        print('[log - orderproduct]:', user_data)

        #* creating inline menu with username
        ACCEPT_MENU = InlineKeyboardMarkup(
            inline_keyboard = [
                [InlineKeyboardButton(text = f'–æ—Ç–∫–ª–æ–Ω–∏—Ç—å {user_data[message.from_user.username]["username"]}', callback_data = f'reject'), 
                InlineKeyboardButton(text = f'–æ–¥–æ–±—Ä–∏—Ç—å {user_data[message.from_user.username]["username"]}', callback_data = f'accept')]
            ]
        ) 

        #* sending all info that user sended to the manager 
        await bot.send_message(message.from_id, 'üì§–æ—Ç–ª–∏—á–Ω–æ, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—éüì§\n–æ–∂–∏–¥–∞–π—Ç, –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await bot.send_message(MANAGER_ID, f'@{message.from_user.username}\n\
product: {user_data[message.from_user.username]["product"]}\n\
time: {user_data[message.from_user.username]["ordertime"]}\n\
place: {user_data[message.from_user.username]["orderplace"]}üì•', reply_markup = ACCEPT_MENU)
        
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '‚ÄºÔ∏è–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞‚ÄºÔ∏è')
        await LOrder.product.set()


@dp.callback_query_handler()
async def moderation_func(call: types.CallbackQuery):
    global orders

    print(user_data)

    if call.data == 'reject':
        for name in user_data:
            if name in call.message.text:
                print(name)
                await bot.send_message(user_data[name]['id'], '‚ùå–≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–æ–∫–ª–æ–Ω—ë–Ω‚ùå\n–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â—è–π—Ç–µ—Å—å –∫ \n<a href = "https://t.me/MinskoeOpg1">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä—Éüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')
                await bot.send_message(user_data[name]['id'], 'üîÑ–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑, —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É: /order')                                                                                                                                                                

    elif call.data == 'accept':
        orders.append(user_data[data["username"]]["product"])
        print(orders)

        for name in user_data:
            if name in call.message.text:
                metrostation = METRO_STATIONS.get(user_data[dt["username"]]["orderplace"].lower())
                if metrostation == None:
                    await bot.send_message(user_data[name]['id'], f'‚ú®–≤–∞—à –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω –∏ —É–∂–µ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ‚ú®\n–≤ {user_data[dt["username"]]["ordertime"]} –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –±—ã—Ç—å –Ω–∞ {user_data[dt["username"]]["orderplace"].lower()}\n—Ç–∞–º –≤–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä —Å {user_data[data["username"]]["product"]}\n\n–µ—Å–ª–∏ –≤–∞–º –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –æ–±—Ä–∞—â—è–π—Ç–µ—Å—å –∫ <a href = "https://t.me/MinskoeOpg1">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä—Éüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')
                elif metrostation != None:
                    await bot.send_message(user_data[name]['id'], f'‚ú®–≤–∞—à –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω –∏ —É–∂–µ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ‚ú®\n–≤ {user_data[dt["username"]]["ordertime"]} –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –±—ã—Ç—å –Ω–∞ {METRO_STATIONS[user_data[dt["username"]]["orderplace"].lower()]}\n—Ç–∞–º –≤–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä —Å {user_data[data["username"]]["product"]}\n\n–µ—Å–ª–∏ –≤–∞–º –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –æ–±—Ä–∞—â—è–π—Ç–µ—Å—å –∫ <a href = "https://t.me/MinskoeOpg1">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä—Éüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')

                await bot.send_message(user_data[name]['id'], 'üîÑ–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑, —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É: /order')                                                                                                                                                                

if __name__ == '__main__':
    executor.start_polling(dp)
#| coded by codem